snippet ife
if (${1:true}) {
	$2
}
else {
	$3
}
$0
endsnippet

snippet if
if (${1:true}) {
	$2
}
$0
endsnippet

snippet fun
function${1: ${2:defaultName}}($3) {
	$4
}
endsnippet

snippet :f "method"
$1: function($3) {
	$4
}${2:,}
endsnippet

snippet me
module.exports = {
	$1
}
endsnippet

snippet mef
module.exports = function${1: ${2:defaultName}}($3) {
	$4
}
endsnippet

snippet fac
$1: React.createFactory('$1')${2:,}
endsnippet

snippet cl
console.log(${1:'value'})$0
endsnippet

snippet re
var $1 = require('${2:$1}')
endsnippet

snippet for
for(var ${1:key} in ${2:obj}) {
	$0
}
endsnippet

#
#Express
#
snippet get
app.get('$1', function(req, res) {
	$2
})
$0
endsnippet

snippet post
app.post('$1', function(req, res) {
	$2
})
$0
endsnippet

#
#React
#
snippet tss "set state" b
this.setState({
	${1}: ${2}
})$0
endsnippet

snippet props "get property" i
this.props.${1}
endsnippet

snippet state "get state" i
this.state.${1}
endsnippet

snippet rcc "create class/component" b
${1:var React = require('react')}
var ${2:ClassName} = React.createClass({

	render: function() {
		return (
			${VISUAL}$4
		)
	}

})
$0
${3:module.exports = $2}
endsnippet

snippet cdm "component did mount" b
componentDidMount: function() {
	${1}
},$0
endsnippet

snippet cdup "component did update" b
componentDidUpdate: function(prevProps, prevState) {
	${1}
},$0
endsnippet

snippet cwm "component will mount" b
componentWillMount: function() {
	${1}
},$0
endsnippet

snippet cwr "component will receive props" b
componentWillReceiveProps: function(nextProps) {
	${1}
},$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount: function() {
	${1}
},$0
endsnippet

snippet cwup "component will update" b
componentWillUpdate: function(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet fup
forceUpdate(${1:callback})
endsnippet

snippet gdp "get default props" b
getDefaultProps: function() {
	return {
		${1}
	}
},$0
endsnippet

snippet gis "get initial state" b
getInitialState: function() {
	return {
		${1}: ${2}
	}
},$0
endsnippet

snippet ism "is mounted"
isMounted()
endsnippet

snippet pt "propTypes" b
propTypes: {
	${1}: React.PropTypes.${2:string}
},
endsnippet

snippet ren
render: function() {
	return (
		${1:<div />}
	)
}$0
endsnippet

snippet scu "should component update"
shouldComponentUpdate: function(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet jsx "define jsx dom" b
/**
 * @jsx React.DOM
 */
endsnippet

snippet cn "className"
className=${1:\{$2\}}
endsnippet

#
#REACT ES6
#
snippet component "Create component template"
import React, { Component, PropTypes } from 'react'

export default class ${1:Component} extends Component {
  render() {
    return (
			$0
    )
  }
}

$1.propTypes = {
}
endsnippet

snippet rexport "Re-export a component"
export { default as $1 } from './$1/$1'
endsnippet

snippet reducer "Create a new reducer"
const $1 = '$2/$1'

export default function reducer(state = ${3:\{\}}, action = {}) {
	switch (action.type) {
		case $1:
			return $4
		default: return state
	}
}

export function $5() {
	return {
		type: $1
	}
}
endsnippet

snippet mapState "Map state to props to use with react-redux"
const mapStateToProps = (state) => {
	return {
		$1
	}
}
endsnippet

snippet mapDispatch "Map dispatcher to use with react-redux"
const mapDispatchToProps = (dispatch) => {
	return {
		$1
	}
}
endsnippet

snippet container "Pure redux container"
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'

import { $1 } from '../../components'
import { * as $2 } from '../../redux/modules/$2'

const mapStateToProps = (state) => {
	return {
		$3
	}
}

const mapDispatchToProps = (dispatch) => {
	return {
		$4
	}
}

export default connect(
	mapStateToProps,
	mapDispatchToProps
)($1)
endsnippet

snippet importn "Named import"
import { $1 } from '$2'
endsnippet

snippet importc "Import component"
import { $1 } from '../../$2'
endsnippet

snippet ireact "Import React and component"
import React, { Component${1:, PropTypes} } from 'react'
$0
endsnippet

snippet style "set style props in react"
style={{$1}}
endsnippet

snippet importr "Import reducer from modules dir"
import { default as $1 } from './modules/$1'
endsnippet

snippet import "Normal import"
import $1 from '$2'
endsnippet

snippet iaction "Import action functions"
import * as $1 from '../../redux/modules/$1'
endsnippet
